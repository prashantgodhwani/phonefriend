<?php

namespace App\Http\Controllers;

use App\Accessory;
use App\OrderDevice;
use App\Settlement;
use App\Bid;
use App\Condition;
use App\Order;
use Illuminate\Http\Request;
use App\Phone;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;

class AccountController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth','isBanned']);
        $this->middleware(['UcanAccess','isSold'],['only' => ['editphones','showbids','sold','showbids']]);
        $this->middleware(['isUser'],['only' => ['showorders','cancelorder']]);
        $this->middleware(['isMerchant'],['only' => ['index','showphones','editphones','sold','showSettlements']]);
    }

    public function index(){
        return view('accounts.home');
    }

    public function showphones(){
        $phones=Phone::where('user_id',Auth::user()->id)->orderBy('sold')->latest()->paginate(8);

        $dt = DB::table('phones')->selectRaw('`user_id`,SUM(price*(units-units_rem)) as total_sales')
            ->whereRaw('`units_rem` < `units` AND `user_id`= '.Auth::user()->id .' AND `sold`!=2')->groupBy('user_id')->orderByRaw('total_sales DESC')->first();
        $totals = DB::table('settlements')
            ->select('user_id', DB::raw('SUM(amount) as total_settled'))
            ->where('user_id',Auth::user()->id)
            ->groupBy('user_id')
            ->first();
        return view('accounts.show',compact(['phones','dt','totals']));
    }

    public function showPhoneOrders(Phone $phone){
        $phones=OrderDevice::where('phone_id',$phone->id)->latest()->paginate(8);
        return view('accounts.showphones',compact(['phones','phone']));
    }

    public function showSettlements(){
        $datas=Settlement::where('user_id',Auth::user()->id)->latest()->paginate(8);
        $dt = DB::table('phones')->selectRaw('`user_id`,SUM(price*(units-units_rem)) as total_sales')
            ->whereRaw('`units_rem` < `units` AND `user_id`= '.Auth::user()->id .' AND `sold`!=2')->groupBy('user_id')->orderByRaw('total_sales DESC')->first();
        $totals = DB::table('settlements')
            ->select('user_id', DB::raw('SUM(amount) as total_settled'))
            ->where('user_id',Auth::user()->id)
            ->groupBy('user_id')
            ->first();
        
        return view('accounts.settlements',compact(['datas','dt','totals']));
    }
   public function cancelorder()
   {
	   
	  $newOrder = Order::where('id',$_POST['id'])->first();
   
            $newOrder->reason         = $_POST['reason'];
			$newOrder->order_status	='Cancelled';
			 try{
			$newOrder->save();
			 }
			  catch(\Exception $e){
        echo $e->getMessage();
			  }
			return redirect('account/orders');
            
	   
   }
   
    public function storeAccount(Request $request)
    {
        $this->validate($request,
            [
                'name' => 'required',
                'phone' => 'required|numeric|digits_between:10,10',
                'curr_password' => 'required',
                'new_password' => 'string|min:6|nullable',
            ]);

        if (isset($request->new_password)) {
            if (!(Hash::check($request->get('curr_password'), Auth::user()->password))) {
                // The passwords matches
                \request()->session()->flash('alert', 'Your current password does not matches with the password you provided. Please try again.');
                return redirect()->route('accnt');
            }

            if (strcmp($request->get('curr_password'), $request->get('new_password')) == 0) {
                \request()->session()->flash('alert', 'New Password cannot be same as your current password. Please choose a different password.');
                return redirect()->route('accnt');
            }

            //Change Password
            $user = Auth::user();
            $user->password = bcrypt($request->get('new_password'));
            $user->name=$request->name;
            $user->save();
            \request()->session()->flash('status', 'Profile updated successfully.');
            return redirect()->route('accnt');
        }
        else{
            if (!(Hash::check($request->get('curr_password'), Auth::user()->password))) {
                // The passwords matches
                \request()->session()->flash('alert', 'Your current password does not matches with the password you provided. Please try again.');
                return redirect()->route('accnt');
            }
            else {
                $user = Auth::user();
                $user->name = $request->name;
                $user->phone = $request->phone;
                $user->save();
                \request()->session()->flash('status', 'Profile updated successfully.');
                return redirect()->route('accnt');
            }
        }
    }

    public function showorders(){
        $orders=Order::where('user_id',Auth::user()->id)->where('order_status','Success')->latest()->paginate(8);
        return view('accounts.orders',compact('orders'));
    }

    public function editphones(Phone $phone){
        $conditions=Condition::pluck('condition','id');
        $accessories=Accessory::pluck('accessory','id');
        return view('accounts.edit',compact('phone','conditions','accessories'));
    }

    public function sold(Phone $phone){
        $conditions=Condition::pluck('condition','id');
        $accessories=Accessory::pluck('accessory','id');
        return view('accounts.edit',compact('phone','conditions','accessories'));
    }

}
